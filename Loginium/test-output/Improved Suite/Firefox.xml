<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="lgvn13460" name="Firefox" tests="10" failures="0" timestamp="25 Apr 2016 06:01:48 GMT" time="0.06" errors="0">
  <testcase name="@BeforeSuite beforeSuite" time="0.0" classname="DashboardTest.LoginTest">
    <failure type="org.springframework.beans.factory.BeanCreationException" message="Error creating bean with name &amp;apos;firefox&amp;apos; defined in class path resource [BrowserSetting.xml]: Initialization of bean failed; nested exception is org.springframework.beans.ConversionNotSupportedException: Failed to convert property value of type [java.lang.String] to required type [com.loginium.LoginiumConstants$Browser] for property &amp;apos;browserName&amp;apos;; nested exception is java.lang.IllegalStateException: Cannot convert value of type [java.lang.String] to required type [com.loginium.LoginiumConstants$Browser] for property &amp;apos;browserName&amp;apos;: no matching editors or conversion strategy found">
      <![CDATA[org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'firefox' defined in class path resource [BrowserSetting.xml]: Initialization of bean failed; nested exception is org.springframework.beans.ConversionNotSupportedException: Failed to convert property value of type [java.lang.String] to required type [com.loginium.LoginiumConstants$Browser] for property 'browserName'; nested exception is java.lang.IllegalStateException: Cannot convert value of type [java.lang.String] to required type [com.loginium.LoginiumConstants$Browser] for property 'browserName': no matching editors or conversion strategy found
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)
	at DashboardTest.TestBase.beforeSuite(TestBase.java:23)
Caused by: org.springframework.beans.ConversionNotSupportedException: Failed to convert property value of type [java.lang.String] to required type [com.loginium.LoginiumConstants$Browser] for property 'browserName'; nested exception is java.lang.IllegalStateException: Cannot convert value of type [java.lang.String] to required type [com.loginium.LoginiumConstants$Browser] for property 'browserName': no matching editors or conversion strategy found
	at org.springframework.beans.AbstractNestablePropertyAccessor.convertIfNecessary(AbstractNestablePropertyAccessor.java:591)
	at org.springframework.beans.AbstractNestablePropertyAccessor.convertForProperty(AbstractNestablePropertyAccessor.java:603)
	at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:204)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1527)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1486)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1226)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	... 29 more
Caused by: java.lang.IllegalStateException: Cannot convert value of type [java.lang.String] to required type [com.loginium.LoginiumConstants$Browser] for property 'browserName': no matching editors or conversion strategy found
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:302)
	at org.springframework.beans.AbstractNestablePropertyAccessor.convertIfNecessary(AbstractNestablePropertyAccessor.java:576)
	... 35 more
... Removed 18 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeSuite beforeSuite -->
  <testcase name="@BeforeMethod beforeMethod" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@AfterMethod afterMethod" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@AfterMethod afterMethod" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@AfterMethod afterMethod" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@AfterMethod afterMethod" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@AfterMethod afterMethod" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!--  -->
  <testcase name="" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!--  -->
  <testcase name="" time="0.01" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!--  -->
  <testcase name="" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!--  -->
  <testcase name="" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!--  -->
  <testcase name="" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!--  -->
  <testcase name="" time="0.0" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!--  -->
  <testcase name="" time="0.02" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!--  -->
  <testcase name="" time="0.01" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!--  -->
  <testcase name="" time="0.02" classname="DashboardTest.LoginTest">
    <skipped/>
  </testcase> <!--  -->
</testsuite> <!-- Firefox -->
